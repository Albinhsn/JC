
#include "resources/x11.jc"

int draw_grid(x11_window * window, int * grid, int grid_width, int grid_height){

  int colors[7] = [RED, GREEN, BLUE, CYAN, WHITE, PURPLE, GRAY];
  
  int screen_height = 400;
  int screen_width  = 400;

  int pad = 4;
  int block_width = screen_width / (grid_width + pad * 2);
  int block_height = screen_height / (grid_height);

  for(int y = 0; y < grid_height; y++){
    for(int x = 0; x < grid_width; x++){
      int window_x = (pad + x) * block_width;
      int window_y = block_height * y; 
      int color_idx = grid[x + y * grid_width];
      int color = colors[color_idx];
      if(x11_draw_rect(window, window_x, window_y, block_width, block_height, color) == -1){
        return -1;
      }
    }
  }
  
}


int main(){

  int colors[7] = [RED, GREEN, BLUE, CYAN, WHITE, PURPLE, GRAY];
  int grid_size = 20 * 10;
  int * grid = malloc(grid_size * 8);
  for(int i = 0; i < grid_size; i++){
    grid[i] = i % 7;
  }

  int timestamp = 0;
  
  x11_window window;
  int result = create_x11_window(&window, 200, 200, 400, 400);

  if(result != 0){
    printf("Failed to create x11 window!\n");
    return 1;
  }

  while(1 == 1){
    byte polled = poll_messages(window.fd, window.window_id, window.gc_id);

    if(polled == -1){
        return 0;
    }


    int current_timestamp = time(0);
    if(current_timestamp != timestamp){
      timestamp = current_timestamp;
      for(int i = 0; i < grid_size; i++){
        grid[i] = (grid[i] + 1) % 7;
      }
      x11_redraw(window.fd, window.window_id);
      if(draw_grid(&window, grid, 10, 20) == -1){
        return 1;
      }
    }
  }

}

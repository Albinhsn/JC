
// Define file functions from libc
#extern int*  fopen(...) // open file
#extern int  fprintf(...) // write to file 
#extern int  fclose(...) // close file

// Define square root from libc
#extern float sqrtf(float x)

// Helper for a boolean value
#define TRUE 1

// Helper for FILE * in C
#define FILE int *



// Some helper structures for colors and primitives
// RGB color
struct Color {
    int r;
    int g;
    int b;
}

// Defines a rectangle and it's color
struct Rect{
    int minX;
    int minY;
    int maxX;
    int maxY;
    Color color;
}

// Defines a circle and it's color
struct Circle{
    int x;
    int y;
    int r;
    Color color;
}

// writes the header for a ppm file
void output_ppm_header(int * file, int width, int height){
    fprintf(file, "P3\n%ld %ld\n255\n", width, height);
}

// Writes the value of a pixel to the file
void write_pixel(int * file, Color color){
    fprintf(file, "%d %d %d\n", color.r, color.g, color.b);
}


// Helper functions to get some colors
Color get_yellow(){
    Color color;
    color.r = 255;
    color.g = 255;
    color.b = 0;

    return color;
}

Color get_black(){
    Color color;
    color.r = 0;
    color.g = 0;
    color.b = 0;

    return color;
}


// Helper initializers for our structures
Rect create_rect(int minX, int maxX, int minY, int maxY, Color color){
    Rect rect;
    rect.minX = minX;
    rect.maxX = maxX;
    rect.minY = minY;
    rect.maxY = maxY;
    rect.color = color;

    return rect;
}


Circle create_circle(int x, int y, int r, Color color){
    Circle circle;
    circle.x = x;
    circle.y = y;
    circle.r = r;
    circle.color = color;

    return circle;
}



// Helper to calculate the distance from the center of the circle 
float distance_to_circle(Circle circle, int x, int y){
    int xDiff = circle.x - x;
    int yDiff = circle.y - y;
    float tot = xDiff * xDiff + yDiff * yDiff;
    return sqrtf(tot);
}

// Calculate rectangle and pixel intersection
int hit_rect(Rect rect, int x, int y){
    if(rect.minX > x || x > rect.maxX){
        return 0;
    }
    if(rect.minY > y || y > rect.maxY){
        return 0;
    }
    return TRUE;
}

int main(){ 
    // open our file
    FILE file = fopen("test.ppm", "w");

    // our width and height of our image
    int width = 400;
    int height = 400;

    // output file header
    output_ppm_header(file, width, height);

    // create our eyes and head
    int eyeOffsetX = 40;
    int eyeOffsetY = 40;
    int eyeR = 20;
    Circle head      = create_circle(200, 200, 125, get_yellow());
    Circle left_eye      = create_circle(200 - eyeOffsetX, 200 - eyeOffsetY, eyeR, get_black());
    Circle right_eye      = create_circle(200 + eyeOffsetX, 200 - eyeOffsetY, eyeR, get_black());

    // create our mouth
    Rect   mouth = create_rect(160, 240, 230, 270, get_black());

    // iterate over every pixel
    for(int y = 0; y < height; y++){
        for(int x = 0; x < width; x++){
            Color pixel;
            // Calculate what we hit
            if(distance_to_circle(left_eye, x, y) < left_eye.r){
                pixel = left_eye.color;
            }
            else if(distance_to_circle(right_eye, x, y) < right_eye.r){
                pixel = right_eye.color;
            }
            else if(hit_rect(mouth, x, y)){
                pixel = mouth.color;
            }
            else if(distance_to_circle(head, x, y) < head.r){
                pixel = head.color;
            }else{
                pixel.r = 255 * (y / (float)height);
                pixel.g = 255 * (x / (float)width);
                pixel.b = 255;
            }

            // Write the pixel
            write_pixel(file, pixel);
        }
    }

    // Close our file
    fclose(file);
}

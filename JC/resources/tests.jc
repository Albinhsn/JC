#include "resources/foo.jc"


int fib(int a){
   if(a <= 2){
        return 1;
   }
   return fib(a - 1) + fib(a - 2);
}


int rec_struct(Bar bar){
    return bar.foo.a;
}


int arr_conversions(){
    float * arrf = malloc(16);
    arrf[0] = 1;
    arrf[1] = 2.0;
    int * arri = malloc(16);
    arri[0] = 10;
    arri[1] = 20.0;

    return arrf[0] + arrf[1] + arri[0] + arri[1];

}

int move_struct(){
    Foo foo0;
    foo0.a = 5;
    Foo foo1;

    foo1 = foo0;
    return foo1.a;
}


void write_to_pointer(int * a){
    *a = 5;
}

void pointer_switchero(Foo ** foo, Foo * foo1){
    (*foo).a = 20;
    foo1.a = 30;
    return;
}


float float_return(){
    return 2.0;
}

void pointers_pointers_everywhere(){
    int a[4] = [1,2,3,4];
    int * b= &a;
    int **c = &b;

    (*c)[2] = 10;
    int answer = (*c)[1] + (*c)[2];
    print_testi(answer, 12, "pointer_pointers_everywhere");
}

void pointer_fiesta(){
    int a = 5;
    int * b = &a;
    int ** c = &b;
    int *** d=  &c;
    int **** e = &d;

    print_testi(****e, 5, "pointer_fiesta");
}


struct Baz{
    int * a;
}

void pointer_in_struct(){
    Baz foo;
    int a = 5;
    foo.a = &a;

    *foo.a = 3;
    printf("%d == 3?\n", a);
}

void test_loops(){

    int sum = 0;
    for(int i = 0; i < 10; i++){
        sum += i;
    }
    print_testi(sum, 45, "for increasing");

    for(int j = 9; j >= 0; j--){
        sum -= j;
    }
    print_testi(sum, 0, "for decreasing");

    int k = 0;
    while(k < 10){
        k++;
        sum += k;
    }
    print_testi(sum, 55, "while increasing");

    while(k >= 0){
        k--;
        sum -= k;
    }
    print_testi(sum, 11, "while decreasing");

}

void test_arrays(){
    int a[4] = [1,2,3,4];
    int answer = a[0] + a[2];
    print_testi(answer, 4, "index array");

    float b[3] = [2.0, 2.5, 1.0];
    float answerf = b[0] + b[2];
    print_testf(answerf, 3.0, "index float array");

    Foo foo0;
    foo0.a = 5;
    Foo foo1;
    foo1.a = 50;
    Foo foo2;
    foo2.a = 25;
    Foo foo[3] = [foo0, foo1, foo2];

    print_testi(foo[0].a + foo[1].a + foo[2].a, 80, "struct array");

}

void test_augmented(){

    int a = 5;

    a += 3;
    print_testi(a, 8, "+=");

    a -= 2;
    print_testi(a, 6, "-=");

    a *= 3;
    print_testi(a, 18, "*=");

    a /= 18;
    print_testi(a, 1, "/=");

    a ^= 6;
    print_testi(a, 7, "^=");

    a &= 5;
    print_testi(a, 5, "&=");

    a |= 8;
    print_testi(a, 13, "|=");

    a = 5;
    a += 3.0;
    print_testi(a, 8, "+=");

    a -= 2.0;
    print_testi(a, 6, "-=");

    a *= 3.0;
    print_testi(a, 18, "-=");

    a /= 18.0;
    print_testi(a, 1, "/=");

    float f = 2.0;
    f += 1.5;
    print_testf(f, 3.5, "f +=");

    f -= 2.5;
    print_testf(f, 1.0, "f *=");

    f *= 5.0;
    print_testf(f, 5.0, "f *=");

    f /= 2.5;
    print_testf(f, 2.0, "f /=");

    f = 2.0;
    f += 1;
    print_testf(f, 3.0, "f +=");

    f -= 2;
    print_testf(f, 1.0, "f *=");

    f *= 5.0;
    print_testf(f, 5.0, "f *=");

    f /= 2;
    print_testf(f, 2.5, "f /=");

    int * ap = malloc(16);
    ap[1] = 5;
    ap += 1;

    print_testi(*ap, 5, "int * a += 1");

    Foo * foo = malloc(8);
    foo.a = 2;
    foo.a |= 5;

    print_testi(foo.a, 7, "foo.a |= 5");

}

void test_logical(){


    int a;
    // &&
    if(2 == 2 && 3 <= 5){
        a = 1;
    }else{
        a = 0;
    }
    print_testi(a, 1, "logical and");

    if(2 > 2 && 3 <= 5){
        a = 1;
    }else{
        a = 0;
    }
    print_testi(a, 0, "logical and short circuited");

    if(2 > 2 && 3 == 5){
        a = 1;
    }else{
        a = 0;
    }
    print_testi(a, 0, "logical and both fail");

    // ||
    if(2 < 2 || 3 >= 5){
        a = 1;
    }else{
        a = 0;
    }
    print_testi(a, 0, "logical or false");

    if(2 != 2 || 3 <= 5){
        a = 1;
    }else{
        a = 0;
    }
    print_testi(a, 1, "logical or snd is true");

    if(2 == 2 || 3 > 5){
        a = 1;
    }else{
        a = 0;
    }
    print_testi(a, 1, "logical or short circuit");


}

void test_if(){
    int a;
    if(2 == 3){
        a = 0;
    }else{
        a = 1;
    }
    print_testi(a, 1, "==");


    if(2 <= 3){
        a = 1;
    }else{
        a = 0;
    }
    print_testi(a, 1, "<=");


    if(2 >= 3){
        a = 0;
    }else{
        a = 1;
    }
    print_testi(a, 1, ">=");


    if(2 < 3){
        a = 1;
    }else{
        a = 0;
    }
    print_testi(a, 1, "<");


    if(2 > 3){
        a = 0;
    }else{
        a = 1;
    }
    print_testi(a, 1, ">");

    if(2 != 3){
        a = 1;
    }else{
        a = 0;
    }
    print_testi(a, 1, "!=");
}

void test_arithmetic(){
    int a = 5 * 2 - 3 / 4;
    print_testi(a, 10, "5 * 2 - 3 / 4");

    float b = 5.0 * 2.0 - 3.0 / 4.0;
    print_testf(b, 9.25, "5.0 * 2.0 - 3.0 / 4.0");

    // int c = 255 * (5 / 400.0);
    //print_testi(c, 3, "255 * (5 / 400.0)");
}

void test_bitwise(){

    // test shl, shr
    int a = 2;
    print_testi(a << 2, 8, "test_sal");
    print_testi(a >> 1, 1, "test_sar");

    int b = 7;
    print_testi(b & a, 2, "test bit &");
    print_testi(b | 8, 15, "test bit |");
    print_testi(b ^ 5, 2, "test bit ^");
}


Foo return_foo(int a){
    Foo foo;
    foo.a = a;
    return foo;
}

Foo * return_foo_pointer(int a){
    Foo * foo = malloc(8);
    foo.a = a;
    return foo;
}

void test_return_struct(){

   Foo foo = return_foo(5);
   print_testi(foo.a, 5, "Return struct with var stmt from function");

   foo = return_foo(3);
   print_testi(foo.a, 3, "Return struct with assignExpr from function");

   Foo * foo1 = return_foo_pointer(8);
   print_testi(foo1.a, 8, "Return struct pointer with varstmt from function");

   free(foo1);

   foo1 = return_foo_pointer(5);
   print_testi(foo1.a, 5, "Return struct pointer with assign expr from function");



}

void test_fib(){
    print_testi(fib(6), 8, "fib");
}

void test_structs(){
    Bar bar;
    bar.c = 3;
    bar.foo.a = 5;
    bar.foo.b = 2;
    print_testi(rec_struct(bar), 5, "rec_struct");
    print_testi(arr_conversions(), 33, "arr_conversions");
    print_testi(move_struct(), 5, "move_struct");


    Foo foo;
    foo = bar.foo;
    print_testi(foo.a + foo.b, 7, "foo = bar.foo");

}

void test_pointer(){
    int * a = malloc(8);
    write_to_pointer(a);
    print_testi(*a, 5, "write_to_pointer");

    Foo * foo = malloc(8);
    foo.a = 3;

    Foo foo1;
    foo1.a = 2;
    pointer_switchero(&foo, &foo1);
    print_testi(foo.a + foo1.a, 50, "pointer_switcheroo");

    // Tested in the function
    pointer_fiesta();
    pointers_pointers_everywhere();

}

void test_fp(){
    print_testf(float_return(), 2.0, "float_return");

    // float vs float checks;
    int answer = 0;
    if(2.0 == 3.0){
        answer = 0;
    }else{
        answer = 1;
    }
    print_testi(answer, 1, "== f");


    if(2.0 <= 3.0){
        answer = 1;
    }else{
        answer = 0;
    }
    print_testi(answer, 1, "<=, f");


    if(2.0 >= 3.0){
        answer = 0;
    }else{
        answer = 1;
    }
    print_testi(answer, 1, ">=, f");


    if(2.0 < 3.0){
        answer = 1;
    }else{
        answer = 0;
    }
    print_testi(answer, 1, "<, f");


    if(2.0 > 3.0){
        answer = 0;
    }else{
        answer = 1;
    }
    print_testi(answer, 1, ">, f");

    if(2.0 != 3.0){
        answer = 1;
    }else{
        answer = 0;
    }
    print_testi(answer, 1, "!=, f");

    if(2 == 3.0){
        answer = 0;
    }else{
        answer = 1;
    }
    print_testi(answer, 1, "== f");


    if(2 <= 3.0){
        answer = 1;
    }else{
        answer = 0;
    }
    print_testi(answer, 1, "<=, i - f");


    if(2 >= 3.0){
        answer = 0;
    }else{
        answer = 1;
    }
    print_testi(answer, 1, ">=, i - f");


    if(2 < 3.0){
        answer = 1;
    }else{
        answer = 0;
    }
    print_testi(answer, 1, "<, i - f");


    if(2 > 3.0){
        answer = 0;
    }else{
        answer = 1;
    }
    print_testi(answer, 1, ">, i - f");

    if(2 != 3.0){
        answer = 1;
    }else{
        answer = 0;
    }
    print_testi(answer, 1, "!=, i - f");

}

void test_assign(){
    int a = 0;

    a = 1;
    print_testi(a, 1, "a = 1");

    a = 2.0;
    print_testi(a, 2, "a = 2.0");

    float b = 0.0;
    b = 1;
    print_testf(b, 1.0, "b = 1");
    b = 2.0;
    print_testf(b, 2.0, "b = 2.0");

    int * ap = malloc(8);
    *ap = 1;
    print_testi(*ap, 1, "*ap = 1");

    *ap = 2.0;
    print_testi(*ap, 2, "*ap = 2.0");

    ap[0] = 3;
    print_testi(ap[0], 3, "ap[0] = 3");

    ap[0] = 4.0;
    print_testi(ap[0], 4, "ap[0] = 4.0");


    float * bp = malloc(8);
    *bp = 1;
    print_testf(*bp, 1.0, "*bp = 1");

    *bp = 2.0;
    print_testf(*bp, 2.0, "*bp = 2.0");

    bp[0] = 3;
    print_testf(bp[0], 3.0, "bp[0] = 3");

    bp[0] = 4.0;
    print_testf(bp[0], 4.0, "bp[0] = 4.0");


    int **app = malloc(8);
    *app = &a;
    print_testi(**app, 2, "*app = &a");

    float **bpp = malloc(8);
    *bpp = &b;
    print_testf(**bpp, 2.0, "*bpp = &b");

    // assign to struct
    Foo foo;
    foo.a = 5;
    foo.b = 10;
    print_testi(foo.a, 5, "assign to struct");

    Bar bar;
    bar.foo = foo;
    print_testi(bar.foo.a, 5, "bar.foo = foo");

    foo.a = 3;
    foo.b = 1;
    foo = bar.foo;
    print_testi(foo.a + foo.b, 15, "foo = bar.foo");
    foo.a = 6;
    print_testi(bar.foo.a + bar.foo.b, 15, "change struct var after assignment");

    // assign to dereference

    int * p = malloc(16);
    int ** p2 = &p;
    int *** p3 = &p2;
    (**p3)[1] = 2;
    print_testi(p[1], 2, "assign dereference");

}

void test_string(){
    string s = "Hello Sailor!";
    s = "Hello World!";

    int c = s[0];

    int H = c & 255;
    int e = (c >> 8) & 255;
    int l = (c >> 16) & 255;
    int l1 = (c >> 24) & 255;
    printf("%c%c%c%c\n", H,e,l,l1);


}

void test_byte(){
    string s = "Hello Sailor!";
    s = "Hello World!";

    byte H = s[0];
    byte e = s[1];
    byte l = s[2];
    byte l1 = s[3];
    printf("%c%c%c%c\n", H,e,l,l1);
}

int run_tests(){

    test_assign();
    test_fib();
    test_structs();
    test_pointer();
    test_fp();
    test_bitwise();
    test_arithmetic();
    test_if();
    test_loops();
    test_arrays();
    test_augmented();
    test_logical();
    test_return_struct();
    test_string();
    test_byte();

    printf("Finished tests!\n");
    return 0;

}



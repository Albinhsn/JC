#include "resources/foo.jc"

int fib(int a){
   if(a <= 2){
        return 1;
   }
   return fib(a - 1) + fib(a - 2);
}


int rec_struct(Bar bar){
    return bar.foo.a;
}


int arr_conversions(){
    float * arrf = malloc(16);
    arrf[0] = 1;
    arrf[1] = 2.0;
    int * arri = malloc(16);
    arri[0] = 10;
    arri[1] = 20.0;

    return arrf[0] + arrf[1] + arri[0] + arri[1];

}

int move_struct(){
    Foo foo0;
    foo0.a = 5;
    Foo foo1;

    foo1 = foo0;
    return foo1.a;
}


void write_to_pointer(int * a){
    *a = 5;
}

void pointer_switchero(Foo ** foo, Foo * foo1){
    (*foo).a = 20;
    foo1.a = 30;
    return;
}


float float_return(){
    return 2.0;
}

void pointers_pointers_everywhere(){
    int a[4] = [1,2,3,4];
    int * b= &a;
    int **c = &b;

    (*c)[2] = 10;
    int answer = (*c)[1] + (*c)[2];
    print_testi(answer, 12, "pointer_pointers_everywhere");
}

void pointer_fiesta(){
    int a = 5;
    int * b = &a;
    int ** c = &b;
    int *** d=  &c;
    int **** e = &d;

    print_testi(****e, 5, "pointer_fiesta");
}


struct Baz{
    int * a;
}

void pointer_in_struct(){
    Baz foo;
    int a = 5;
    foo.a = &a;

    *foo.a = 3;
    printf("%d == 3?\n", a);
}

void test_loops(){

    int sum = 0;
    for(int i = 0; i < 10; i++){
        sum += i;
    }
    print_testi(sum, 45, "for increasing");

    for(int j = 9; j >= 0; j--){
        sum -= j;
    }
    print_testi(sum, 0, "for decreasing");

    int k = 0;
    while(k < 10){
        k++;
        sum += k;
    }
    print_testi(sum, 55, "while increasing");

    while(k >= 0){
        k--;
        sum -= k;
    }
    print_testi(sum, 11, "while decreasing");

}

void test_arrays(){
    int a[4] = [1,2,3,4];
    int answer = a[0] + a[2];
    print_testi(answer, 4, "index array");

    float b[3] = [2.0, 2.5, 1.0];
    float answerf = b[0] + b[2];
    print_testf(answerf, 3.0, "index float array");

    Foo foo0;
    foo0.a = 5;
    Foo foo1;
    foo1.a = 50;
    Foo foo2;
    foo2.a = 25;
    Foo foo[3] = [foo0, foo1, foo2];

    print_testi(foo[0].a + foo[1].a + foo[2].a, 80, "struct array");

}

void test_cast(){
    int a = (byte)257.0;
    print_testi(a, 1, "int a = (byte)257.0");

    float f = 5.0;
    int b = *(int*)&f;
    b ^= 0x80000000;
    f = *(float*)&b;
    int answer = -5;
    print_testi(f, answer, "*(int*)&f");
}

void test_augmented(){

    byte b = 5;

    b += 3;
    print_testi(b, 8, "+= b");

    b -= 2;
    print_testi(b, 6, "-= b");

    b *= 3;
    print_testi(b, 18, "*= b");

    b /= 18;
    print_testi(b, 1, "/= b");

    b ^= 6;
    print_testi(b, 7, "^=");

    b &= 5;
    print_testi(b, 5, "&=");

    b |= 8;
    print_testi(b, 13, "|=");

    b = 5;
    b += 3.0;
    print_testi(b, 8, "+=");

    b -= 2.0;
    print_testi(b, 6, "-=");

    b *= 3.0;
    print_testi(b, 18, "-=");

    b /= 18.0;
    print_testi(b, 1, "/=");

    int a = 5;

    a += 3;
    print_testi(a, 8, "+=");

    a -= 2;
    print_testi(a, 6, "-=");

    a *= 3;
    print_testi(a, 18, "*=");

    a /= 18;
    print_testi(a, 1, "/=");

    a ^= 6;
    print_testi(a, 7, "^=");

    a &= 5;
    print_testi(a, 5, "&=");

    a |= 8;
    print_testi(a, 13, "|=");

    a = 5;
    a += 3.0;
    print_testi(a, 8, "+=");

    a -= 2.0;
    print_testi(a, 6, "-=");

    a *= 3.0;
    print_testi(a, 18, "-=");

    a /= 18.0;
    print_testi(a, 1, "/=");

    float f = 2.0;
    f += 1.5;
    print_testf(f, 3.5, "f +=");

    f -= 2.5;
    print_testf(f, 1.0, "f *=");

    f *= 5.0;
    print_testf(f, 5.0, "f *=");

    f /= 2.5;
    print_testf(f, 2.0, "f /=");

    f = 2.0;
    f += 1;
    print_testf(f, 3.0, "f +=");

    f -= 2;
    print_testf(f, 1.0, "f *=");

    f *= 5.0;
    print_testf(f, 5.0, "f *=");

    f /= 2;
    print_testf(f, 2.5, "f /=");

    int * ap = malloc(16);
    ap[1] = 5;
    ap += 1;

    print_testi(*ap, 5, "int * a += 1");

    Foo * foo = malloc(8);
    foo.a = 2;
    foo.a |= 5;

    print_testi(foo.a, 7, "foo.a |= 5");

}

void test_logical(){


    int a;
    // &&
    if(2 == 2 && 3 <= 5){
        a = 1;
    }else{
        a = 0;
    }
    print_testi(a, 1, "logical and");

    if(2 > 2 && 3 <= 5){
        a = 1;
    }else{
        a = 0;
    }
    print_testi(a, 0, "logical and short circuited");

    if(2 > 2 && 3 == 5){
        a = 1;
    }else{
        a = 0;
    }
    print_testi(a, 0, "logical and both fail");

    // ||
    if(2 < 2 || 3 >= 5){
        a = 1;
    }else{
        a = 0;
    }
    print_testi(a, 0, "logical or false");

    if(2 != 2 || 3 <= 5){
        a = 1;
    }else{
        a = 0;
    }
    print_testi(a, 1, "logical or snd is true");

    if(2 == 2 || 3 > 5){
        a = 1;
    }else{
        a = 0;
    }
    print_testi(a, 1, "logical or short circuit");


}

void test_if(){
    int a;
    if(2 == 3){
        a = 0;
    }else{
        a = 1;
    }
    print_testi(a, 1, "==");


    if(2 <= 3){
        a = 1;
    }else{
        a = 0;
    }
    print_testi(a, 1, "<=");


    if(2 >= 3){
        a = 0;
    }else{
        a = 1;
    }
    print_testi(a, 1, ">=");


    if(2 < 3){
        a = 1;
    }else{
        a = 0;
    }
    print_testi(a, 1, "<");


    if(2 > 3){
        a = 0;
    }else{
        a = 1;
    }
    print_testi(a, 1, ">");

    if(2 != 3){
        a = 1;
    }else{
        a = 0;
    }
    print_testi(a, 1, "!=");
}

void test_arithmetic(){
    int a = 5 * 2 - 3 / 4;
    print_testi(a, 10, "5 * 2 - 3 / 4");

    float b = 5.0 * 2.0 - 3.0 / 4.0;
    print_testf(b, 9.25, "5.0 * 2.0 - 3.0 / 4.0");

    // int c = 255 * (5 / 400.0);
    //print_testi(c, 3, "255 * (5 / 400.0)");
}

void test_bitwise(){

    // test shl, shr
    int a = 2;
    print_testi(a << 2, 8, "test_sal");
    print_testi(a >> 1, 1, "test_sar");

    int b = 7;
    print_testi(b & a, 2, "test bit &");
    print_testi(b | 8, 15, "test bit |");
    print_testi(b ^ 5, 2, "test bit ^");
}


Foo return_foo(int a){
    Foo foo;
    foo.a = a;
    return foo;
}

Foo * return_foo_pointer(int a){
    Foo * foo = malloc(8);
    foo.a = a;
    return foo;
}

void test_return_struct(){

   Foo foo = return_foo(5);
   print_testi(foo.a, 5, "Return struct with var stmt from function");

   foo = return_foo(3);
   print_testi(foo.a, 3, "Return struct with assignExpr from function");

   Foo * foo1 = return_foo_pointer(8);
   print_testi(foo1.a, 8, "Return struct pointer with varstmt from function");

   free(foo1);

   foo1 = return_foo_pointer(5);
   print_testi(foo1.a, 5, "Return struct pointer with assign expr from function");

}

void test_fib(){
    print_testi(fib(6), 8, "fib");
}


struct StructPair{
    byte x;
    byte y;
 }
struct StructResponse{
    StructPair * response;
}

void test_struct_arg(StructResponse * resp){
    for(int i = 0; i < 8; i++){
        print_testi(resp.response[i].x, i, "Struct Arg response");
        print_testi(resp.response[i].y, i, "Struct Arg response");
    }
}


void test_structs(){
    Bar bar;
    bar.c = 3;
    bar.foo.a = 5;
    bar.foo.b = 2;
    print_testi(rec_struct(bar), 5, "rec_struct");
    print_testi(arr_conversions(), 33, "arr_conversions");
    print_testi(move_struct(), 5, "move_struct");

    StructResponse resp;
    resp.response = malloc(16);
    for(int i = 0; i < 8; i++){
        resp.response[i].x = i;
        resp.response[i].y = i;
    }
    test_struct_arg(&resp);
    for(int i = 0; i < 8; i++){
        print_testi(resp.response[i].x, i, "Struct Arg response");
        print_testi(resp.response[i].y, i, "Struct Arg response");
    }

    Foo foo;
    foo = bar.foo;
    print_testi(foo.a + foo.b, 7, "foo = bar.foo");

    Foo * foo2 = malloc(16);
    foo2.a = 1;
    foo2.b = 2;

    foo2[1].a = 1;
    foo2[1].b = 2;

    foo2[0] = foo;
    print_testi(foo2[0].a + foo2[0].b, 7, "foo2[0] = foo");

    foo.a = 3;
    foo.b = 3;
    *(++foo2) = foo;
    print_testi(foo2.a + foo2.b, 6, "*(++foo2)");


}

void test_pointer(){
    int * a = malloc(8);
    write_to_pointer(a);
    print_testi(*a, 5, "write_to_pointer");

    Foo * foo = malloc(8);
    foo.a = 3;

    Foo foo1;
    foo1.a = 2;
    pointer_switchero(&foo, &foo1);
    print_testi(foo.a + foo1.a, 50, "pointer_switcheroo");

    // Tested in the function
    pointer_fiesta();
    pointers_pointers_everywhere();

}

void test_fp(){
    print_testf(float_return(), 2.0, "float_return");

    // float vs float checks;
    int answer = 0;
    if(2.0 == 3.0){
        answer = 0;
    }else{
        answer = 1;
    }
    print_testi(answer, 1, "== f");


    if(2.0 <= 3.0){
        answer = 1;
    }else{
        answer = 0;
    }
    print_testi(answer, 1, "<=, f");


    if(2.0 >= 3.0){
        answer = 0;
    }else{
        answer = 1;
    }
    print_testi(answer, 1, ">=, f");


    if(2.0 < 3.0){
        answer = 1;
    }else{
        answer = 0;
    }
    print_testi(answer, 1, "<, f");


    if(2.0 > 3.0){
        answer = 0;
    }else{
        answer = 1;
    }
    print_testi(answer, 1, ">, f");

    if(2.0 != 3.0){
        answer = 1;
    }else{
        answer = 0;
    }
    print_testi(answer, 1, "!=, f");

    if(2 == 3.0){
        answer = 0;
    }else{
        answer = 1;
    }
    print_testi(answer, 1, "== f");


    if(2 <= 3.0){
        answer = 1;
    }else{
        answer = 0;
    }
    print_testi(answer, 1, "<=, i - f");


    if(2 >= 3.0){
        answer = 0;
    }else{
        answer = 1;
    }
    print_testi(answer, 1, ">=, i - f");


    if(2 < 3.0){
        answer = 1;
    }else{
        answer = 0;
    }
    print_testi(answer, 1, "<, i - f");


    if(2 > 3.0){
        answer = 0;
    }else{
        answer = 1;
    }
    print_testi(answer, 1, ">, i - f");

    if(2 != 3.0){
        answer = 1;
    }else{
        answer = 0;
    }
    print_testi(answer, 1, "!=, i - f");

}


void test_assign(){
    int a = 0;

    a = 1;
    print_testi(a, 1, "a = 1");

    a = 2.0;
    print_testi(a, 2, "a = 2.0");

    float b = 0.0;
    b = 1;
    print_testf(b, 1.0, "b = 1");
    b = 2.0;
    print_testf(b, 2.0, "b = 2.0");

    int * ap = malloc(8);
    *ap = 1;
    print_testi(*ap, 1, "*ap = 1");

    *ap = 2.0;
    print_testi(*ap, 2, "*ap = 2.0");

    ap[0] = 3;
    print_testi(ap[0], 3, "ap[0] = 3");

    ap[0] = 4.0;
    print_testi(ap[0], 4, "ap[0] = 4.0");


    float * bp = malloc(8);
    *bp = 1;
    print_testf(*bp, 1.0, "*bp = 1");

    *bp = 2.0;
    print_testf(*bp, 2.0, "*bp = 2.0");

    bp[0] = 3;
    print_testf(bp[0], 3.0, "bp[0] = 3");

    bp[0] = 4.0;
    print_testf(bp[0], 4.0, "bp[0] = 4.0");


    int **app = malloc(8);
    *app = &a;
    print_testi(**app, 2, "*app = &a");

    float **bpp = malloc(8);
    *bpp = &b;
    print_testf(**bpp, 2.0, "*bpp = &b");

    // assign to struct
    Foo foo;
    foo.a = 5;
    foo.b = 10;
    print_testi(foo.a, 5, "assign to struct");

    Bar bar;
    bar.foo = foo;
    print_testi(bar.foo.a, 5, "bar.foo = foo");

    foo.a = 3;
    foo.b = 1;
    foo = bar.foo;
    print_testi(foo.a + foo.b, 15, "foo = bar.foo");
    foo.a = 6;
    print_testi(bar.foo.a + bar.foo.b, 15, "change struct var after assignment");

    // assign to dereference

    int * p = malloc(16);
    int ** p2 = &p;
    int *** p3 = &p2;
    (**p3)[1] = 2;
    print_testi(p[1], 2, "assign dereference");

}


byte ret_byte(){
    return 1;
}

void test_byte(){
    string s = "Hello World!";

    int a = 257;
    byte b = a;
    print_testi(b, 1, "b = a, a = 256");

    int arr[2] = [0,1];
    byte b1 = arr[1];
    print_testi(b1, 1, "b = arr[1]");

    int c = 0xFFFFF;
    c = ret_byte();
    print_testi(c, 1, "ret byte");

    byte barr[2] = [0,1];
    int a1 = barr[1];
    print_testi(a1, 1, "a1 = barr[1]");

    float f1 = barr[1];
    print_testf(f1, 1.0, "f1 = barr[1]");


}

struct Foof{
    float a;
    float b;
}
struct Foob{
    byte a;
    byte b;
}
void test_postfix(){
    int a = 5;
    a++;
    print_testi(a, 6, "a++");

    int * b = &a;
    (*b)++;
    print_testi(*b, 7, "*b++");

    Foo foo;
    foo.a = 5;
    foo.a++;
    print_testi(foo.a, 6, "foo.a++");

    Foo *foo1 = malloc(16);
    foo1[0].a++;
    print_testi(foo1[0].a, 1, "foo1[0].a++");

    float c = 5;
    c++;
    print_testf(c, 6.0, "b++");

    float * d = &c;
    (*d)++;
    print_testf(*d, 7.0, "(*d)++");

    Foof foo2;
    foo2.a = 5.0;
    foo2.a++;
    print_testf(foo2.a, 6.0, "foo2.a++");

    Foof *foo3 = malloc(16);
    foo3[0].a = 0.0;
    foo3[0].a++;
    print_testf(foo3[0].a, 1.0, "foo3[0].a++");

    byte ba = 5;
    ba++;
    print_testb(ba, 6, "a++");

    byte * bb = &ba;
    (*bb)++;
    print_testb(*bb, 7, "*b++");

    Foob foob;
    foob.a = 5;
    foob.a++;
    print_testb(foob.a, 6, "foob.a++");

    Foob *foob1 = malloc(16);
    foob1[0].a++;
    print_testb(foob1[0].a, 1, "foob1[0].a++");

    int arr[2] = [1,2];
    arr[1]++;
    print_testi(arr[1], 3, "arr[1]++");

    byte barr[2] = [1,2];
    barr[1]++;
    print_testi(barr[1], 3, "barr[1]++");

    float farr[2] = [1,2];
    farr[1]++;
    print_testf(farr[1], 3.0, "farr[1]++");

    int k = foo.a++;
    print_testi(k, 6, "k = foo.a++ (k)");
    print_testi(foo.a, 7, "k = foo.a++ (foo.a)");

    int *l = &k;
    int x = (*l)++;
    print_testi(x, 6, "(*l)++");
    int y = l[0]++;
    print_testi(y, 7, "l[0]++");

    k = 6;
    int *l2 = &k;
    int x2 = ++(*l2);
    print_testi(x2, 7, "++(*l2)");
    int y2 = ++l2[0];
    print_testi(y2, 8, "++l2[0]");

}

void test_index(){
    int arr[1] = [1];
    int arr2[2] = [0,1];
    print_testi(arr2[arr[0]], 1, "arr2[arr[0]]");

    byte barr[1] = [1];
    byte barr2[2] = [0,1];
    print_testi(barr2[barr[0]], 1, "barr2[barr[0]]");

    float farr[1] = [1];
    float farr2[2] = [0,1];
    print_testi(farr2[farr[0]], 1, "farr2[farr[0]]");
}

void test_unary_postfix(){
    int a = 5;
    print_testi(++a, 6, "a++");

    int * b = &a;
    print_testi(++(*b), 7, "++(*b)");

    Foo foo;
    foo.a = 5;
    print_testi(++foo.a, 6, "++foo.a");

    Foo *foo1 = malloc(16);
    print_testi(++foo1[0].a, 1, "++foo1[0].a");

    float c = 5;
    print_testf(++c, 6.0, "++c (f)");

    float * d = &c;
    print_testf(++(*d), 7.0, "++(*d)");

    Foof foo2;
    foo2.a = 5.0;
    print_testf(++foo2.a, 6.0, "++foo2.a");

    Foof *foo3 = malloc(16);
    foo3[0].a = 0.0;
    print_testf(++foo3[0].a, 1.0, "++foo3[0].a");

    byte ba = 5;
    print_testb(++ba, 6, "++ba");

    byte * bb = &ba;
    print_testb(++(*bb), 7, "++(*bb)");

    Foob foob;
    foob.a = 5;
    print_testb(++foob.a, 6, "++foob.a");

    Foob *foob1 = malloc(16);
    print_testb(++foob1[0].a, 1, "++foob1[0].a");

    int arr[2] = [1,2];
    print_testi(++arr[1], 3, "++arr[1]");

    byte barr[2] = [1,2];
    print_testi(++barr[1], 3, "++barr[1]");

    float farr[2] = [1,2];
    print_testf(++farr[1], 3.0, "++farr[1]");

    int k = ++foo.a;
    print_testi(k, 7, "k = ++foo.a (k)");
    print_testi(foo.a, 7, "k = ++foo.a (foo.a)");

    int *l = &k;
    int x = ++(*l);
    print_testi(x, 8, "++(*l)");
    int y = ++l[0];
    print_testi(y, 9, "++l[0]");

}

void test_assign_arg(Foo foo){
    Foo foo2;
    foo2.a = 5;
    foo2.b = 10;
    foo = foo2;
    print_testi(foo.a + foo.b, 15, "reassign struct arg");
}

void test_assign_arg_long(long a){
    a = 5;
    print_testl(a, 5, "long assign arg");
}
void test_assign_arg_int(int a){
    a = 5;
    print_testi(a, 5, "int assign arg");
}
void test_assign_arg_short(short a){
    a = 5;
    print_tests(a, 5, "short assign arg");
}

void test_assign_arg_byte(byte a){
    a = 5;
    print_testb(a, 5, "byte assign arg");
}
void test_assign_arg_float(float a){
    a = 5.0;
    print_testf(a, 5.0, "float assign arg");
}
void test_assign_arg_double(double a){
    a = 5.0;
    print_testd(a, 5.0, "double assign arg");
}

byte test_return_byte(){
    return 2;
}
short test_return_short(){
    return 2;
}
int test_return_int(){
    return 2;
}
float test_return_float(){
    return 2.0;
}
double test_return_double(){
    return 2.0;
}
long test_return_long(){
    return 2;
}


struct FooLong{
    long a;
    int b;
    short c;
    byte d;
    float e;
    double f;
}

void test_double(){

    // Array
    double arr[3] = [1,2,3];
    print_testd(arr[0] + arr[2],4, "double array index");
    // Assign
    //      Local
    double a = 5;
    a = 10;
    print_testd(a, 10, "double assign local");

    //      Argument
    test_assign_arg_double(a);

    //      Index
    arr[1] = 5;
    print_testd(arr[1], 5, "double assign index");
    //      Dereference
    double * p = &arr[0];
    *p = 10;
    print_testd(arr[0], 10, "double assign dereference");
    //      Struct
    FooLong foo;
    foo.b = 5;
    print_testd(foo.b, 5, "double assign struct");

    // Binary
    //      Arithmetic
    a = 5 * 2.0 - 4.0;
    print_testd(a, 6, "double arithmetic");
    //      Augmented
    a += 4;
    print_testd(a, 10, "double augmented +");

    // Cast
    //      All the types :)
    a = 15.0;
    float f = a;
    print_testf(f, 15.0, "double assign to float");
    double d = a;
    print_testd(d, 15.0, "double assign to double");
    int b = a;
    print_testd(b, 15, "double assign to int");
    short s = a;
    print_testd(s, 15, "double assign to short");
    byte bb = a;
    print_testb(bb, 15, "double assign to byte");

    // Comparison
    //      All the things and all the types
    double comp_res = a < 5;
    print_testd(comp_res, 0, "double comp < double");

    comp_res = a >= 5.0;
    print_testd(comp_res, 1, "double comp >= double");

    double comp_double = 5;
    comp_res = a != comp_double;
    print_testd(comp_res, 1, "double comp != double");

    double comp_s = 5;
    comp_res = a > comp_s;
    print_testd(comp_res, 1, "double comp > double");

    // IndexExpr
    //      Index with a double as index
    double barr[3] = [1,2,3];
    double idx = 2;
    print_testd(barr[idx], 3, "double index");

    // LogicalExpr
    //      All the things
    double answer;
    if(idx <= 2.0 && idx > 0){
       answer = 1;
    }else{
       answer = 0;
    }
    print_testd(answer, 1, "double logical and, double and double");

    // Postfix
    //      ++, --
    double post = 0;
    print_testd(++post, 1, "double ++post");
    print_testd(post++, 1, "double post++");
    print_testd(post, 2, "double post++ (afterwards)");

    double post_arr[2] = [1,3];
    print_testd(post_arr[0]++, 1, "double post_arr[0]++");
    print_testd(post_arr[0], 2, "double post_arr[0]++ (afterwards)");
    print_testd(++post_arr[0], 3, "double ++post_arr[0]");

    post_arr[0] = 0;
    double * post_p = &post_arr[0];
    print_testd((*post_p)++, 0, "double (*post_p)++");
    print_testd(*post_p, 1, "double (*post_p) (afterwards)");
    print_testd(++(*post_p), 2, "double ++(*post_p)");
    print_testd(*(post_p++), 2, "double *(post_p++)");
    print_testd(*post_p, 3, "double *(post_p++) afterwards");
    print_testd(*(--post_p), 2, "double *(--post_p)");

    FooLong foo2;
    foo2.f = 0;
    print_testd(foo2.f++, 0, "double foo2.f++");
    print_testd(foo2.f, 1, "double foo2.f++ (afterwards)");
    print_testd(++foo2.f, 2, "double ++foo2.f");

    // Return
    //  As double and with casts
    print_testd(test_return_long(), 2, "double return long");
    print_testd(test_return_byte(), 2, "double return byte");
    print_testd(test_return_short(), 2, "double return short");
    print_testd(test_return_int(), 2, "double return int");
    print_testd(test_return_double(), 2, "double return double");

}

void test_float(){

    // Array
    float arr[3] = [1,2,3];
    print_testf(arr[0] + arr[2],4, "float array index");
    // Assign
    //      Local
    float a = 5;
    a = 10;
    print_testf(a, 10, "float assign local");

    //      Argument
    test_assign_arg_float(a);

    //      Index
    arr[1] = 5;
    print_testf(arr[1], 5, "float assign index");
    //      Dereference
    float * p = &arr[0];
    *p = 10;
    print_testf(arr[0], 10, "float assign dereference");
    //      Struct
    FooLong foo;
    foo.b = 5;
    print_testf(foo.b, 5, "float assign struct");

    // Binary
    //      Arithmetic
    a = 5 * 2.0 - 4.0;
    print_testf(a, 6, "float arithmetic");
    //      Augmented
    a += 4;
    print_testf(a, 10, "float augmented +");

    // Cast
    //      All the types :)
    a = 15.0;
    float f = a;
    print_testf(f, 15.0, "float assign to float");
    double d = a;
    print_testd(d, 15.0, "float assign to double");
    int b = a;
    print_testf(b, 15, "float assign to int");
    short s = a;
    print_testf(s, 15, "float assign to short");
    byte bb = a;
    print_testb(bb, 15, "float assign to byte");

    // Comparison
    //      All the things and all the types
    float comp_res = a < 5;
    print_testf(comp_res, 0, "float comp < float");

    comp_res = a >= 5.0;
    print_testf(comp_res, 1, "float comp >= float");

    float comp_float = 5;
    comp_res = a != comp_float;
    print_testf(comp_res, 1, "float comp != float");

    float comp_s = 5;
    comp_res = a > comp_s;
    print_testf(comp_res, 1, "float comp > float");

    // IndexExpr
    //      Index with a float as index
    float barr[3] = [1,2,3];
    float idx = 2;
    print_testf(barr[idx], 3, "float index");

    // LogicalExpr
    //      All the things
    float answer;
    if(idx <= 2.0 && idx > 0){
       answer = 1;
    }else{
       answer = 0;
    }
    print_testf(answer, 1, "float logical and, float and float");

    // Postfix
    //      ++, --
    float post = 0;
    print_testf(++post, 1, "float ++post");
    print_testf(post++, 1, "float post++");
    print_testf(post, 2, "float post++ (afterwards)");

    float post_arr[2] = [1,3];
    print_testf(post_arr[0]++, 1, "float post_arr[0]++");
    print_testf(post_arr[0], 2, "float post_arr[0]++ (afterwards)");
    print_testf(++post_arr[0], 3, "float ++post_arr[0]");

    post_arr[0] = 0;
    float * post_p = &post_arr[0];
    print_testf((*post_p)++, 0, "float (*post_p)++");
    print_testf(*post_p, 1, "float (*post_p) (afterwards)");
    print_testf(++(*post_p), 2, "float ++(*post_p)");
    print_testf(*(post_p++), 2, "float *(post_p++)");
    print_testf(*post_p, 3, "float *(post_p++) afterwards");
    print_testf(*(--post_p), 2, "float *(--post_p)");

    FooLong foo2;
    foo2.e = 0;
    print_testf(foo2.e++, 0, "float foo2.e++");
    print_testf(foo2.e, 1, "float foo2.e++ (afterwards)");
    print_testf(++foo2.e, 2, "float ++foo2.e");

    // Return
    //  As float and with casts
    print_testf(test_return_long(), 2, "float return long");
    print_testf(test_return_byte(), 2, "float return byte");
    print_testf(test_return_short(), 2, "float return short");
    print_testf(test_return_int(), 2, "float return int");
    print_testf(test_return_double(), 2, "float return double");

}

void test_int(){

    // Array
    int arr[3] = [1,2,3];
    print_testi(arr[0] + arr[2],4, "int array index");
    // Assign
    //      Local
    int a = 5;
    a = 10;
    print_testi(a, 10, "int assign local");

    //      Argument
    test_assign_arg_int(a);

    //      Index
    arr[1] = 5;
    print_testi(arr[1], 5, "int assign index");
    //      Dereference
    int * p = &arr[0];
    *p = 10;
    print_testi(arr[0], 10, "int assign dereference");
    //      Struct
    FooLong foo;
    foo.b = 5;
    print_testi(foo.b, 5, "int assign struct");

    // Binary
    //      Arithmetic
    a = 5 * 2.0 - 3.5;
    print_testi(a, 6, "int arithmetic");
    //      Augmented
    a += 4;
    print_testi(a, 10, "int augmented +");
    a &= 8;
    print_testi(a, 8, "int augmented &");
    //      Bitwise
    a = a | 7;
    print_testi(a, 15, "int bitwise");

    // Cast
    //      All the types :)
    float f = a;
    print_testf(f, 15.0, "int assign to float");
    double d = a;
    print_testd(d, 15.0, "int assign to double");
    int b = a;
    print_testi(b, 15, "int assign to int");
    short s = a;
    print_testi(s, 15, "int assign to short");
    byte bb = a;
    print_testb(bb, 15, "int assign to byte");

    // Comparison
    //      All the things and all the types
    int comp_res = a < 5;
    print_testi(comp_res, 0, "int comp < int");

    comp_res = a >= 5.0;
    print_testi(comp_res, 1, "int comp >= float");

    int comp_int = 5;
    comp_res = a != comp_int;
    print_testi(comp_res, 1, "int comp != int");

    int comp_s = 5;
    comp_res = a > comp_s;
    print_testi(comp_res, 1, "int comp > int");

    // IndexExpr
    //      Index with a int as index
    int barr[3] = [1,2,3];
    int idx = 2;
    print_testi(barr[idx], 3, "int index");

    // LogicalExpr
    //      All the things
    int answer;
    if(idx <= 2.0 && idx > 0){
       answer = 1;
    }else{
       answer = 0;
    }
    print_testi(answer, 1, "int logical and, float and int");

    // Postfix
    //      ++, --
    int post = 0;
    print_testi(++post, 1, "int ++post");
    print_testi(post++, 1, "int post++");
    print_testi(post, 2, "int post++ (afterwards)");

    int post_arr[2] = [1,3];
    print_testi(post_arr[0]++, 1, "int post_arr[0]++");
    print_testi(post_arr[0], 2, "int post_arr[0]++ (afterwards)");
    print_testi(++post_arr[0], 3, "int ++post_arr[0]");

    post_arr[0] = 0;
    int * post_p = &post_arr[0];
    print_testi((*post_p)++, 0, "int (*post_p)++");
    print_testi(*post_p, 1, "int (*post_p) (afterwards)");
    print_testi(++(*post_p), 2, "int ++(*post_p)");
    print_testi(*(post_p++), 2, "int *(post_p++)");
    print_testi(*post_p, 3, "int *(post_p++) afterwards");
    print_testi(*(--post_p), 2, "int *(--post_p)");

    FooLong foo2;
    foo2.b = 0;
    print_testi(foo2.b++, 0, "int foo2.b++");
    print_testi(foo2.b, 1, "int foo2.b++ (afterwards)");
    print_testi(++foo2.b, 2, "int ++foo2.b");

    // Return
    //  As int and with casts
    print_testi(test_return_long(), 2, "int return long");
    print_testi(test_return_byte(), 2, "int return byte");
    print_testi(test_return_short(), 2, "int return short");
    print_testi(test_return_float(), 2, "int return float");
    print_testi(test_return_double(), 2, "int return double");

    // Unary
    int neg_l = 5;
    print_testi(-neg_l, -5, "int -neg_l");


}

void test_short(){

    // Array
    short arr[3] = [1,2,3];
    print_tests(arr[0] + arr[2],4, "short array index");
    // Assign
    //      Local
    short a = 5;
    a = 10;
    print_tests(a, 10, "short assign local");

    //      Argument
    test_assign_arg_short(a);

    //      Index
    arr[1] = 5;
    print_tests(arr[1], 5, "short assign index");
    //      Dereference
    short * p = &arr[0];
    *p = 10;
    print_tests(arr[0], 10, "short assign dereference");
    //      Struct
    FooLong foo;
    foo.c = 5;
    print_tests(foo.c, 5, "short assign struct");

    // Binary
    //      Arithmetic
    a = 5 * 2.0 - 3.5;
    print_tests(a, 6, "short arithmetic");
    //      Augmented
    a += 4;
    print_tests(a, 10, "short augmented +");
    a &= 8;
    print_tests(a, 8, "short augmented &");
    //      Bitwise
    a = a | 7;
    print_tests(a, 15, "short bitwise");

    // Cast
    //      All the types :)
    float f = a;
    print_testf(f, 15.0, "short assign to float");
    double d = a;
    print_testd(d, 15.0, "short assign to double");
    short b = a;
    print_tests(b, 15, "short assign to short");
    short s = a;
    print_tests(s, 15, "short assign to short");

    // Comparison
    //      All the things and all the types
    short comp_res = a < 5;
    print_tests(comp_res, 0, "short comp < int");

    comp_res = a >= 5.0;
    print_tests(comp_res, 1, "short comp >= float");

    short comp_short = 5;
    comp_res = a != comp_short;
    print_tests(comp_res, 1, "short comp != short");

    short comp_s = 5;
    comp_res = a > comp_s;
    print_tests(comp_res, 1, "short comp > short");

    // IndexExpr
    //      Index with a short as index
    short barr[3] = [1,2,3];
    short idx = 2;
    print_tests(barr[idx], 3, "short index");

    // LogicalExpr
    //      All the things
    int answer;
    if(idx <= 2.0 && idx > 0){
       answer = 1;
    }else{
       answer = 0;
    }
    print_tests(answer, 1, "short logical and, float and int");

    // Postfix
    //      ++, --
    short post = 0;
    print_tests(++post, 1, "short ++post");
    print_tests(post++, 1, "short post++");
    print_tests(post, 2, "short post++ (afterwards)");

    short post_arr[2] = [1,3];
    print_tests(post_arr[0]++, 1, "short post_arr[0]++");
    print_tests(post_arr[0], 2, "short post_arr[0]++ (afterwards)");
    print_tests(++post_arr[0], 3, "short ++post_arr[0]");

    post_arr[0] = 0;
    short * post_p = &post_arr[0];
    print_tests((*post_p)++, 0, "short (*post_p)++");
    print_tests(*post_p, 1, "short (*post_p) (afterwards)");
    print_tests(++(*post_p), 2, "short ++(*post_p)");
    print_tests(*(post_p++), 2, "short *(post_p++)");
    print_tests(*post_p, 3, "short *(post_p++) afterwards");
    print_tests(*(--post_p), 2, "short *(--post_p)");

    FooLong foo2;
    foo2.c = 0;
    print_tests(foo2.c++, 0, "short foo2.c++");
    print_tests(foo2.c, 1, "short foo2.c++ (afterwards)");
    print_tests(++foo2.c, 2, "short ++foo2.c");

    // Return
    //  As short and with casts
    print_tests(test_return_long(), 2, "short return long");
    print_tests(test_return_byte(), 2, "short return byte");
    print_tests(test_return_int(), 2, "short return int");
    print_tests(test_return_float(), 2, "short return float");
    print_tests(test_return_double(), 2, "short return double");

    // Unary
    short neg_l = 5;
    print_tests(-neg_l, -5, "short -neg_l");


}

void test_byte2(){

    // Array
    byte arr[3] = [1,2,3];
    print_testb(arr[0] + arr[2],4, "byte array index");
    // Assign
    //      Local
    byte a = 5;
    a = 10;
    print_testb(a, 10, "byte assign local");

    //      Argument
    test_assign_arg_byte(a);

    //      Index
    arr[1] = 5;
    print_testb(arr[1], 5, "byte assign index");
    //      Dereference
    byte * p = &arr[0];
    *p = 10;
    print_testb(arr[0], 10, "byte assign dereference");
    //      Struct
    FooLong foo;
    foo.d = 5;
    print_testb(foo.d, 5, "byte assign struct");

    // Binary
    //      Arithmetic
    a = 5 * 2.0 - 3.5;
    print_testb(a, 6, "byte arithmetic");
    //      Augmented
    a += 4;
    print_testb(a, 10, "byte augmented +");
    a &= 8;
    print_testb(a, 8, "byte augmented &");
    //      Bitwise
    a = a | 7;
    print_testb(a, 15, "byte bitwise");

    // Cast
    //      All the types :)
    float f = a;
    print_testf(f, 15.0, "byte assign to float");
    double d = a;
    print_testd(d, 15.0, "byte assign to double");
    byte b = a;
    print_testb(b, 15, "byte assign to byte");
    short s = a;
    print_tests(s, 15, "byte assign to short");

    // Comparison
    //      All the things and all the types
    byte comp_res = a < 5;
    print_testb(comp_res, 0, "byte comp < int");

    comp_res = a >= 5.0;
    print_testb(comp_res, 1, "byte comp >= float");

    byte comp_byte = 5;
    comp_res = a != comp_byte;
    print_testb(comp_res, 1, "byte comp != byte");

    short comp_s = 5;
    comp_res = a > comp_s;
    print_testb(comp_res, 1, "byte comp > short");

    // IndexExpr
    //      Index with a byte as index
    byte barr[3] = [1,2,3];
    byte idx = 2;
    print_testb(barr[idx], 3, "byte index");

    // LogicalExpr
    //      All the things
    int answer;
    if(idx <= 2.0 && idx > 0){
       answer = 1;
    }else{
       answer = 0;
    }
    print_testb(answer, 1, "byte logical and, float and int");

    // Postfix
    //      ++, --
    byte post = 0;
    print_testb(++post, 1, "byte ++post");
    print_testb(post++, 1, "byte post++");
    print_testb(post, 2, "byte post++ (afterwards)");

    byte post_arr[2] = [1,3];
    print_testb(post_arr[0]++, 1, "byte post_arr[0]++");
    print_testb(post_arr[0], 2, "byte post_arr[0]++ (afterwards)");
    print_testb(++post_arr[0], 3, "byte ++post_arr[0]");

    post_arr[0] = 0;
    byte * post_p = &post_arr[0];
    print_testb((*post_p)++, 0, "byte (*post_p)++");
    print_testb(*post_p, 1, "byte (*post_p) (afterwards)");
    print_testb(++(*post_p), 2, "byte ++(*post_p)");
    print_testb(*(post_p++), 2, "byte *(post_p++)");
    print_testb(*post_p, 3, "byte *(post_p++) afterwards");
    print_testb(*(--post_p), 2, "byte *(--post_p)");

    FooLong foo2;
    foo2.d = 0;
    print_testb(foo2.d++, 0, "byte foo2.d++");
    print_testb(foo2.d, 1, "byte foo2.d++ (afterwards)");
    print_testb(++foo2.d, 2, "byte ++foo2.d");

    // Return
    //  As byte and with casts
    print_testb(test_return_long(), 2, "byte return long");
    print_testb(test_return_short(), 2, "byte return short");
    print_testb(test_return_int(), 2, "byte return int");
    print_testb(test_return_float(), 2, "byte return float");
    print_testb(test_return_double(), 2, "byte return double");

    // Unary
    byte neg_l = 5;
    print_testb(-neg_l, -5, "byte -neg_l");


}

void test_long(){
    // Array
    long arr[3] = [1,2,3];
    print_testl(arr[0] + arr[2],4, "long array index");
    // Assign
    //      Local
    long a = 5;
    a = 10;
    print_testl(a, 10, "long assign local");

    //      Argument
    test_assign_arg_long(a);

    //      Index
    arr[1] = 5;
    print_testl(arr[1], 5, "long assign index");
    //      Dereference
    long * p = &arr[0];
    *p = 10;
    print_testl(arr[0], 10, "long assign dereference");
    //      Struct
    FooLong foo;
    foo.a = 5;
    print_testl(foo.a, 5, "long assign struct");

    // Binary
    //      Arithmetic
    a = 5 * 2.0 - 3.5;
    print_testl(a, 6, "long arithmetic");
    //      Augmented
    a += 4;
    print_testl(a, 10, "long augmented +");
    a &= 8;
    print_testl(a, 8, "long augmented &");
    //      Bitwise
    a = a | 7;
    print_testl(a, 15, "long bitwise");

    // Cast
    //      All the types :)
    float f = a;
    print_testf(f, 15.0, "long assign to float");
    double d = a;
    print_testd(d, 15.0, "long assign to double");
    byte b = a;
    print_testb(b, 15, "long assign to byte");
    short s = a;
    print_tests(s, 15, "long assign to short");

    // Comparison
    //      All the things and all the types
    byte comp_res = a < 5;
    print_testb(comp_res, 0, "long comp < int");

    comp_res = a >= 5.0;
    print_testb(comp_res, 1, "long comp >= float");

    byte comp_byte = 5;
    comp_res = a != comp_byte;
    print_testb(comp_res, 1, "long comp != byte");

    short comp_s = 5;
    comp_res = a > comp_s;
    print_testb(comp_res, 1, "long comp > short");

    // IndexExpr
    //      Index with a long as index
    byte barr[3] = [1,2,3];
    long idx = 2;
    print_testb(barr[idx], 3, "long index");

    // LogicalExpr
    //      All the things
    int answer;
    if(idx <= 2.0 && idx > 0){
       answer = 1;
    }else{
       answer = 0;
    }
    print_testb(answer, 1, "long logical and, float and int");

    // Postfix
    //      ++, --
    long post = 0;
    print_testl(++post, 1, "long ++post");
    print_testl(post++, 1, "long post++");
    print_testl(post, 2, "long post++ (afterwards)");

    long post_arr[2] = [1,3];
    print_testl(post_arr[0]++, 1, "long post_arr[0]++");
    print_testl(post_arr[0], 2, "long post_arr[0]++ (afterwards)");
    print_testl(++post_arr[0], 3, "long ++post_arr[0]");

    post_arr[0] = 0;
    long * post_p = &post_arr[0];
    print_testl((*post_p)++, 0, "long (*post_p)++");
    print_testl(*post_p, 1, "long (*post_p) (afterwards)");
    print_testl(++(*post_p), 2, "long ++(*post_p)");
    print_testl(*(post_p++), 2, "long *(post_p++)");
    print_testl(*post_p, 3, "long *(post_p++) afterwards");
    print_testl(*(--post_p), 2, "long *(--post_p)");

    FooLong foo2;
    foo2.a = 0;
    print_testl(foo2.a++, 0, "long foo2.a++");
    print_testl(foo2.a, 1, "long foo2.a++ (afterwards)");
    print_testl(++foo2.a, 2, "long ++foo2.a");

    // Return
    //  As long and with casts
    print_testl(test_return_byte(), 2, "long return byte");
    print_testl(test_return_short(), 2, "long return short");
    print_testl(test_return_int(), 2, "long return int");
    print_testl(test_return_float(), 2, "long return float");
    print_testl(test_return_double(), 2, "long return double");

    // Unary
    long neg_l = 5;
    print_testl(-neg_l, -5, "long -neg_l");

}

int run_tests(){

    test_assign();
    test_fib();
    test_structs();
    test_pointer();
    test_fp();
    test_bitwise();
    test_arithmetic();
    test_if();
    test_loops();
    test_arrays();
    test_augmented();
    test_logical();
    test_return_struct();
    test_byte();
    test_postfix();
    test_index();
    test_unary_postfix();
    Foo foo;
    foo.a = 3;
    foo.b = 2;
    test_assign_arg(foo);
    test_cast();

    test_long();
    test_byte2();
    test_short();
    test_int();
    test_float();
    test_double();

    printf("Finished tests!\n");
    return 0;

}



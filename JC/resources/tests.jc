#include "resources/foo.jc"

#include "resources/main.jc"

void print_testi(int got, int expected, string name){
    if(got == expected){
        printf("PASSED: %s", name);
    }else{
        printf("FAILED: %s, got %d expected %d", name, got, expected);
    }
}
void print_testf(float got, float expected, string name){
    if(got == expected){
        printf("PASSED: %s", name);
    }else{
        printf("FAILED: got %f expected %f with %s", got, expected, name);
    }
}

int fib(int a){
   if(a <= 2){
        return 1;
   }
   return fib(a - 1) + fib(a - 2);
}

int for_sum(){
    int sum = 0;
    for(int i = 0; i < 10; i++){
        sum += i;
    }
    return sum;
}

int rec_struct(Bar bar){
    return bar.foo.a;
}

int arr_conversions(){
    float * arrf = malloc(16);
    arrf[0] = 1;
    arrf[1] = 2.0;
    int * arri = malloc(16);
    arri[0] = 10;
    arri[1] = 20.0;

    return arrf[0] + arrf[1] + arri[0] + arri[1];

}

int move_struct(){
    Foo foo0;
    foo0.a = 5;
    Foo foo1;

    foo1 = foo0;
    return foo1.a;
}


void write_to_pointer(int * a){
    *a = 5;
}

void pointer_switchero(Foo ** foo, Foo * foo1){
    (*foo).a = 20;
    foo1.a = 30;
    return;
}

int index_array(){
    int * a = [1,2,3,4];
    int answer = a[0] + a[2];
    print_testi(answer, 4, "index_array");
}

float float_return(){
    return 2.0;
}

void pointers_pointers_everywhere(){
    int * a = [1,2,3,4];
    int * b= &a;
    int **c = &b;

    (*c)[2] = 10;
    int answer = (*c)[1] + (*c)[2];
    print_testi(answer, 12, "pointer_pointers_everywhere");
}

void pointer_fiesta(){
    int a = 5;
    int * b = &a;
    int ** c = &b;
    int *** d=  &c;
    int **** e = &d;

    print_testi(****e, 5, "pointer_fiesta");
}


struct Baz{
    int * a;
}

void pointer_in_struct(){
    Baz foo;
    int a = 5;
    foo.a = &a;

    *foo.a = 3;
    printf("%d == 3?", a);
}

int run_tests(){
    print_testi(fib(6), 8, "fib");
    print_testi(for_sum(), 45, "for_sum");


    Bar bar;
    bar.c = 3;
    bar.foo.a = 5;
    bar.foo.b = 2;
    print_testi(rec_struct(bar), 5, "rec_struct");
    print_testi(arr_conversions(), 33, "arr_conversions");
    print_testi(move_struct(), 5, "move_struct");

    int * a = malloc(8);
    write_to_pointer(a);
    print_testi(*a, 5, "write_to_pointer");

    Foo * foo = malloc(8);
    foo.a = 3;

    Foo foo1;
    foo1.a = 2;
    pointer_switchero(&foo, &foo1);
    print_testi(foo.a + foo1.a, 50, "pointer_switcheroo");

    // Tested in the function
    index_array();
    pointer_fiesta();
    pointers_pointers_everywhere();


    print_testf(float_return(), 2.0, "float_return");
}


